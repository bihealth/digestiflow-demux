# Central Snakemake for digestiflow_demux.

import os

from digestiflow_demux.snakemake_support import (
    bcl2fastq_wrapper,
    get_result_files_demux,
    get_result_files_demux_with_project,
    get_result_files_fastqc,
    get_tiles_arg,
    get_tool_marker,
    listify,
    wrapper_path,
)

# -------------------------------------------------------------------------------------------------
# Helper Functions

def out_prefix(path):
    return os.path.join(config["output_dir"], path)

# -------------------------------------------------------------------------------------------------
# Define local rules.

localrules: all, marker_file

# -------------------------------------------------------------------------------------------------
# The main rule depends on the "result is complete" file.

rule all:
    input: out_prefix("DIGESTIFLOW_DEMUX_DONE.txt"),

# -------------------------------------------------------------------------------------------------
# Create "result is complete" file.

@listify
def marker_file_input(wildcards):
    if "seq" in config["delivery_type"]:
        yield out_prefix("multiqc/multiqc_report.html")
        yield out_prefix("multiqc/multiqc_data.zip")
        yield out_prefix(get_tool_marker(config))
    if "bcl" in config["delivery_type"]:
        yield out_prefix("TARBALLS_DONE.txt")

rule marker_file:
    input: marker_file_input
    output: out_prefix("DIGESTIFLOW_DEMUX_DONE.txt"),
    shell:
        r"""
        set -x; date --iso-8601=s >{output}
        """

# -------------------------------------------------------------------------------------------------
# Create lane-wise tarballs of the input.

rule create_tarballs:
    output: out_prefix("TARBALLS_DONE.txt")
    shell:
        r"""
        set -x
        set -eu
        # set -o pipefail

        export TMPDIR=$(mktemp -d)
        trap "rm -rf $TMPDIR" EXIT ERR

        (cd $(dirname {config[input_dir]}) && \
         find $(basename {config[input_dir]}) \
            -type f -and \
            -not -path '*Logs*' -and \
            -not -path '*Data*' -and \
            -not -path '*Thumbnail*' \
         | sort -g \
         > $TMPDIR/files.txt)

        for i in $(seq 1 {config[flowcell][num_lanes]}); do
            lane=$(printf %03d $i)

            cat $TMPDIR/files.txt \
            > $TMPDIR/files_L${{lane}}.txt

            (cd $(dirname {config[input_dir]}) && \
             find $(basename {config[input_dir]}) \
                -type f -and \
                -path '*Data*' -and \
                -path "*/L${{lane}}*" \
             | sort -g \
             >> $TMPDIR/files_L${{lane}}.txt)

            outf=$(dirname {output})/BCLS_LANE_${{lane}}.tar
            tar --owner=0 --group=0 -C $(dirname {config[input_dir]}) -vcf $outf -T $TMPDIR/files_L${{lane}}.txt
            md5sum $outf >$outf.md5
        done

        date --iso-8601=s >{output}
        """

# -------------------------------------------------------------------------------------------------
# Perform demultiplexing.
# Use bcl2fastq1 for flowcells with rta_version 1

rule demux_bcl2fastq1:
    input: sheet=out_prefix("SampleSheet.csv")
    output: get_result_files_demux(config),
            marker = out_prefix("bcl2fastq1.done")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
    threads: config["cores"]
    wrapper: wrapper_path(bcl2fastq_wrapper(config))

# -------------------------------------------------------------------------------------------------
# bclconvert
bases_masks = config["flowcell"]["demux_reads_override"]
keep_undetermined = config["flowcell"]["demux_reads"]  # keep undetermined from configured reads, might be suboptimal?

rule demux_bclconvert_aggregate:
    input: expand(out_prefix("illumina_basesmask/{bases_mask}/bclconvert.done"), bases_mask = bases_masks),
    output: fastq = get_result_files_demux_with_project(config),
            marker = out_prefix("bclconvert.done")
    run:
        # FASTQ file names are prefixed with their bases mask. Rename them to the expected output.
        # code is mostly duplicated from bcl2fastq2, but as behaviour can diverge, this is ok.
        import os
        import glob
        from snakemake import shell
        for final_path in output.fastq:
            d = os.path.dirname(final_path)
            f = os.path.basename(final_path)
            if not f.startswith("Undetermined_"):
                os.rename(glob.glob(os.path.join(d, "*__" + f))[0], final_path)
            else:
                if not keep_undetermined:
                    continue
                undetermined = glob.glob(os.path.join(d, keep_undetermined + "__" + f))
                if not undetermined:
                    undetermined = glob.glob(os.path.join(d, "*__" + f))
                if undetermined:
                    os.rename(undetermined[0], final_path)
                else:  # write a fake fastq if you can't find any, but it is expected
                    import gzip
                    os.makedirs(d, exist_ok=True)
                    with gzip.open(final_path, "wt") as f:
                        f.write("@placeholder\n")
                        f.write("N\n")
                        f.write("+\n")
                        f.write("!\n")
        shell(
            r"""
            for dest in {output.fastq}; do
                pushd $(dirname $dest)
                md5sum $(basename $dest) >$(basename $dest).md5
                popd
            done
            touch {output.marker}
            """
            )

rule demux_bclconvert:
    input: sheet = out_prefix("illumina_basesmask/{bases_mask}/SampleSheet.csv")
    output: marker = out_prefix("illumina_basesmask/{bases_mask}/bclconvert.done")
    params:
        flowcell_token=config["flowcell"]["composite_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        # tiles_arg=get_tiles_arg(config),  # disable for the time being
    threads: config["cores"]
    wrapper: wrapper_path("bclconvert")

# -------------------------------------------------------------------------------------------------
# bcl2fastq2

# Get list of all bases masks configured, as bcl2fastq2 will be run once for each
bases_masks = config["flowcell"]["demux_reads_override"]
keep_undetermined = config["flowcell"]["demux_reads"]  # keep undetermined from configured reads, might be suboptimal?

rule demux_bcl2fastq2_aggregate:
    input: expand(out_prefix("illumina_basesmask/{bases_mask}/bcl2fastq2.done"), bases_mask = bases_masks)
    output: fastq = get_result_files_demux(config),
            marker = out_prefix("bcl2fastq2.done")
    params:
        keep_undetermined = keep_undetermined,
    run:
        # FASTQ file names are prefixed with their bases mask. Rename them to the expected output.
        import os
        import glob
        from snakemake import shell
        for final_path in output.fastq:
            d = os.path.dirname(final_path)
            f = os.path.basename(final_path)
            if not f.startswith("Undetermined_"):
                os.rename(glob.glob(os.path.join(d, "*__" + f))[0], final_path)
            else:
                undetermined = glob.glob(os.path.join(d, keep_undetermined + "__" + f))
                if not undetermined:
                    undetermined = glob.glob(os.path.join(d, "*__" + f))
                if undetermined:
                    os.rename(undetermined[0], final_path)
                else:  # write a fake fastq if you can't find any, but it is expected
                    import gzip
                    os.makedirs(d, exist_ok=True)
                    with gzip.open(final_path, "wt") as f:
                        f.write("@placeholder\n")
                        f.write("N\n")
                        f.write("+\n")
                        f.write("!\n")
        shell(
            r"""
            for dest in {output.fastq}; do
                pushd $(dirname $dest)
                md5sum $(basename $dest) >$(basename $dest).md5
                popd
            done
            touch {output.marker}
            """
            )

rule demux_bcl2fastq2_par:
    input: sheet = out_prefix("illumina_basesmask/{bases_mask}/SampleSheet.csv")
    output: marker = out_prefix("illumina_basesmask/{bases_mask}/bcl2fastq2.done")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
    threads: config["cores"]
    wrapper: wrapper_path(bcl2fastq_wrapper(config))

# -------------------------------------------------------------------------------------------------
# Picard

# either take configured lane or all lanes
lanes_to_process = config.get("lanes")
if not lanes_to_process:
    lanes_to_process = set()
    for lib in config["flowcell"]["libraries"]:
        lanes_to_process |= set(lib["lanes"])

rule demux_picard:
    input: metrics=expand(out_prefix("picard_barcodes/{lane}/metrics.txt"), lane=lanes_to_process),
           sheets=expand(out_prefix("picard_barcodes/{lane}/samplesheet.txt"), lane=lanes_to_process)
    output: get_result_files_demux(config),
            marker = out_prefix("picard.done")
    params:
        machine_name=config["flowcell"]["sequencing_machine"],
        flowcell_token=config["flowcell"]["vendor_id"],
        run_number=config["flowcell"]["run_number"],
        read_structure=config["flowcell"]["demux_reads"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
        lanes=lanes_to_process,
    threads: config["cores"]
    wrapper: wrapper_path("picard/basecalls_to_fastq")

rule prepare_picard:
    input: out_prefix("picard_barcodes/{lane}/barcodes.txt")
    output: out_prefix("picard_barcodes/{lane}/metrics.txt")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        read_structure=config["flowcell"]["demux_reads"],
        input_dir=config["input_dir"],
    threads: config["cores"]
    wrapper: wrapper_path("picard/extract_barcodes")

# -------------------------------------------------------------------------------------------------
# Run FastQC.
# Have to use ruleorder for ambiguous targets. TODO re-visit if there is a simpler way.
if config["demux_tool"] == "bclconvert":
    ruleorder: fastqc_with_project > fastqc
    ruleorder: fastqc_with_project > fastqc_undetermined_extra
else:
    ruleorder: fastqc > fastqc_with_project
    ruleorder: fastqc > fastqc_undetermined_extra

rule fastqc:
    input:
        fastq=out_prefix("{sample}/{flowcell}/{lane}/{filename}.fastq.gz")
    output:
        html=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html"),
        html_md5=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html.md5"),
        zip=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip"),
        zip_md5=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip.md5"),
    threads: 1
    #conda: "seq-qc"
    wrapper: wrapper_path("fastqc")

# fastqc rules for new structure with projects in paths specifically
rule fastqc_with_project:
    input:
        fastq=out_prefix("{project}/{sample}/{flowcell}/{filename}.fastq.gz")
    output:
        html=out_prefix("{project}/{sample}/{flowcell}/qc/fastqc/{filename}_fastqc.html"),
        html_md5=out_prefix("{project}/{sample}/{flowcell}/qc/fastqc/{filename}_fastqc.html.md5"),
        zip=out_prefix("{project}/{sample}/{flowcell}/qc/fastqc/{filename}_fastqc.zip"),
        zip_md5=out_prefix("{project}/{sample}/{flowcell}/qc/fastqc/{filename}_fastqc.zip.md5"),
    threads: 1
    #conda: "seq-qc"
    wrapper: wrapper_path("fastqc")

rule fastqc_undetermined_extra:
    "Undetermined files are not part of project structure, handle separately for bclconvert"
    input:
        fastq=out_prefix("Undetermined/{flowcell}/{filename}.fastq.gz")
    output:
        html=out_prefix("Undetermined/{flowcell}/qc/fastqc/{filename}_fastqc.html"),
        html_md5=out_prefix("Undetermined/{flowcell}/qc/fastqc/{filename}_fastqc.html.md5"),
        zip=out_prefix("Undetermined/{flowcell}/qc/fastqc/{filename}_fastqc.zip"),
        zip_md5=out_prefix("Undetermined/{flowcell}/qc/fastqc/{filename}_fastqc.zip.md5"),
    threads: 1
    conda: "seq-qc"
    wrapper: wrapper_path("fastqc")

# -------------------------------------------------------------------------------------------------
# Collect all QC statistics using MultiQC.

rule illumina_demultiplexing_multiqc:
    input: get_result_files_fastqc(config)["zip"]
    output:
        html=out_prefix("multiqc/multiqc_report.html"),
        zip=out_prefix("multiqc/multiqc_data.zip"),
    threads: 1
    #conda: "seq-qc"
    wrapper: wrapper_path("multiqc")
