# Central Snakemake for digestiflow_demux.

import os

from digestiflow_demux.snakemake_support import (
    bcl2fastq_wrapper,
    get_result_files_fastqc,
    get_result_files_demux,
    get_tiles_arg,
    wrapper_path,
)

from digestiflow_demux.bases_mask import return_bases_mask

# -------------------------------------------------------------------------------------------------
# Helper Functions


def out_prefix(path):
    return os.path.join(config["output_dir"], path)


def demux_reads(flowcell, demux_tool):
    demux_reads = flowcell.get("demux_reads") or flowcell["planned_reads"]
    planned_reads = flowcell["planned_reads"]

    if demux_tool == "bcl2fastq" and demux_reads == planned_reads:
        return ""
    elif demux_tool == "bcl2fastq":
        return return_bases_mask(planned_reads, demux_reads)
    else:
        return return_bases_mask(planned_reads, demux_reads, "picard")

# -------------------------------------------------------------------------------------------------
# Define local rules.

localrules: all, marker_file

# -------------------------------------------------------------------------------------------------
# The main rule depends on the "result is complete" file.

rule all:
    input: out_prefix("DIGESTIFLOW_DEMUX_DONE.txt"),

# -------------------------------------------------------------------------------------------------
# Create "result is complete" file.

rule marker_file:
    input:
        out_prefix("multiqc/multiqc_report.html"),
        out_prefix("multiqc/multiqc_data.zip"),
        # **get_result_files_fastqc(config),
    output: out_prefix("DIGESTIFLOW_DEMUX_DONE.txt"),
    shell:
        r"""
        set -x; date --iso-8601=s >{output}
        """

# -------------------------------------------------------------------------------------------------
# Perform demultiplexing.

if config["demux_tool"] == "bcl2fastq":
    ruleorder: demux > demux_picard
elif config["demux_tool"] == "picard" and config["rta_version"] == 2:
    ruleorder: demux_picard > demux
else:
    raise("Picard can only be used with rta version 2 at the moment")

rule demux:
    input: out_prefix("SampleSheet.csv")
    output: get_result_files_demux(config)
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        read_structure=demux_reads(config["flowcell"], config["demux_tool"]),
        tiles_arg=get_tiles_arg(config),
    threads: config["cores"]
    wrapper: wrapper_path(bcl2fastq_wrapper(config))

# Picard: either take configured lane or all lanes
lanes_to_process = config.get("lanes")
if not lanes_to_process:
    lanes_to_process = [x+1 for x in range(config["flowcell"]["num_lanes"])]

rule demux_picard:
    input: metrics=expand(out_prefix("picard_barcodes/{lane}/metrics.txt"), lane=lanes_to_process),
           sheets=expand(out_prefix("picard_barcodes/{lane}/samplesheet.txt"), lane=lanes_to_process)
    output: get_result_files_demux(config)
    params:
        machine_name=config["flowcell"]["sequencing_machine"],
        flowcell_token=config["flowcell"]["vendor_id"],
        run_number=config["flowcell"]["run_number"],
        read_structure=demux_reads(config["flowcell"], config["demux_tool"]),
        input_dir=config["input_dir"],
        output_dir=config["output_dir"],
        tiles_arg=get_tiles_arg(config),
        lanes=lanes_to_process,
    threads: config["cores"]
    wrapper: wrapper_path("picard/basecalls_to_fastq")

rule prepare_picard:
    input: out_prefix("picard_barcodes/{lane}/barcodes.txt")
    output: out_prefix("picard_barcodes/{lane}/metrics.txt")
    params:
        flowcell_token=config["flowcell"]["vendor_id"],
        read_structure=demux_reads(config["flowcell"], config["demux_tool"]),
        input_dir=config["input_dir"],
    threads: config["cores"]
    wrapper: wrapper_path("picard/extract_barcodes")

# -------------------------------------------------------------------------------------------------
# Run FastQC.

rule fastqc:
    input:
        fastq=out_prefix("{sample}/{flowcell}/{lane}/{filename}.fastq.gz")
    output:
        html=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html"),
        html_md5=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.html.md5"),
        zip=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip"),
        zip_md5=out_prefix("{sample}/{flowcell}/{lane}/qc/fastqc/{filename}_fastqc.zip.md5"),
    threads: 1
    wrapper: wrapper_path("fastqc")

# -------------------------------------------------------------------------------------------------
# Collect all QC statistics using MultiQC.

rule illumina_demultiplexing_multiqc:
    input: get_result_files_fastqc(config)["zip"]
    output:
        html=out_prefix("multiqc/multiqc_report.html"),
        zip=out_prefix("multiqc/multiqc_data.zip"),
    threads: 1
    wrapper: wrapper_path("multiqc")
